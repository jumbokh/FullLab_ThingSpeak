//----------------------------------------------
//
//        Sketch Generated by Visuino
//              www.visuino.com
//
//----------------------------------------------

#define VISUINO_ESP8266

#include <OpenWire.h>
#include <Mitov.h>
#include <ESP8266WiFi.h>
#include <Mitov_ESP8266_WiFi.h>
#include <WiFiUDP.h>
#include <Ethernet.h>
#include <SPI.h>
#include <Mitov_FormattedSerial.h>
#include <Mitov_DHT_Sensor.h>
#include <Mitov_Structure.h>
#include <Mitov_Timing.h>

// Declarations

namespace Declarations
{
Mitov::ESP8266WiFiModule TArduinoESP8266WiFiModule1;
Mitov::UDPSocket<Mitov::BasicEthernetShield,WiFiUDP> TArduinoWiFiUDPSocket1( TArduinoESP8266WiFiModule1, IPAddress( 200, 200, 200, 200 ) );
Mitov::EthernetSocketBinaryInput<Mitov::UDPSocket<Mitov::BasicEthernetShield,WiFiUDP>, &TArduinoWiFiUDPSocket1> TArduinoWiFiUDPSocket1_SerialInputByte_1;
Mitov::DHT11Sensor<D2> HumidityThermometer1;
Mitov::MakeStructure<8> MakeStructure1;
Mitov::ClockGenerator ClockGenerator1;
} // Declarations

//The setup function is called once at startup of the sketch
void setup()
{
  Declarations::MakeStructure1.Elements.push_back( new Mitov::BasicTypedStructureSinkElement<float,float> );
  Declarations::MakeStructure1.Elements.push_back( new Mitov::BasicTypedStructureSinkElement<float,float> );
  Declarations::TArduinoESP8266WiFiModule1.AccessPoint.SSID = "Thermometer";
  Declarations::TArduinoESP8266WiFiModule1.AccessPoint.Config.IP = IPAddress( 200, 200, 200, 100 );
  Declarations::TArduinoESP8266WiFiModule1.AccessPoint.Config.Enabled = true;
  Declarations::TArduinoWiFiUDPSocket1.RemotePort = 8888;
  Declarations::HumidityThermometer1.TemperatureOutputPin.Connect( ((Mitov::BasicTypedStructureSinkElement<float,float> *) Declarations::MakeStructure1.Elements[ 0 ] )->InputPin );
  Declarations::HumidityThermometer1.HumidityOutputPin.Connect( ((Mitov::BasicTypedStructureSinkElement<float,float> *) Declarations::MakeStructure1.Elements[ 1 ] )->InputPin );
  Declarations::MakeStructure1.OutputPin.Connect( Declarations::TArduinoWiFiUDPSocket1_SerialInputByte_1.InputPin );
  Declarations::ClockGenerator1.OutputPin.Connect( Declarations::HumidityThermometer1.ClockInputPin );

  OpenWire::Component::_SystemInit();
}

// The loop function is called in an endless loop
void loop()
{
  OpenWire::Component::_SystemLoop();
}
